{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the AgenaTrader tutorial!\n\n\nTemplate for Indicator, Condition and Strategy\n\n\nOriginally posted as a question in the Agenatrader forum\n\n\nThese two tutorials will show you two templates for indicators, conditions, strategies and give you the ability to have a quick start into AgenaTrader scripting.\n\n\nBasic Template\n\n\nAdvanced Template", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-agenatrader-tutorial", 
            "text": "", 
            "title": "Welcome to the AgenaTrader tutorial!"
        }, 
        {
            "location": "/#template-for-indicator-condition-and-strategy", 
            "text": "Originally posted as a question in the Agenatrader forum  These two tutorials will show you two templates for indicators, conditions, strategies and give you the ability to have a quick start into AgenaTrader scripting.  Basic Template  Advanced Template", 
            "title": "Template for Indicator, Condition and Strategy"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/", 
            "text": "Download files\n\n\nIndicator\n\n\nCondition\n\n\nStrategy\n\n\nAdvanced Template for Indicator, Condition and Strategy\n\n\nOriginally posted as a question in the Agenatrader forum\n\n\nThis tutorial will show you a basic template for indicators, conditions and strategies.\n\n\nIndicator\n\n\nIn many cases we are starting with indicators because indicators are the best place to start on script development. \nYou will be able to get pretty quick an indication if your trading idea is working and of course you are able to screen instruments visual and verify if your trading idea will be profitable.\n\n\nOnBarUpdate\n\n\nOur main logic will be inside of the OnBarUpdate() method. In our example we are using SMA to get long and short signals. If the SMA20 is crossing above the SMA50 we get a long signal. If the SMA20 is crossing below the SMA50 we create a short signal.\n\n\nprotected override void OnBarUpdate()\n{\n            if (CrossAbove(SMA(20), SMA(50), 0) == true)\n            {\n                //set the value of the plot to \n1\n to inidcate a long signal\n                this.SMA_CrossOver.Set(1);\n            }\n            //the internal function CrossBelow checks if the two values are crossing below\n            else if (CrossBelow(SMA(20), SMA(50), 0) == true)\n            {\n                //set the value of the plot to \n-1\n to inidcate a short signal\n                this.SMA_CrossOver.Set(-1);\n            }\n            else\n            {\n             //set the value of the plot to \n0\n to inidcate a flat signal\n                this.SMA_CrossOver.Set(0);\n            }\n}\n\n\n\n\nCondition\n\n\nOnBarUpdate\n\n\nAlso in this case the main logic is inside of the OnBarUpdate() method. Because our main logic is inside of the indicator itself we need to create an instance of this indicator. So we are able to get the data from the indicator and set our Occured object.\n\n\nprotected override void OnBarUpdate()\n{\n            //get the indicator\n            Example_Indicator_SMA_CrossOver_Basic Example_Indicator_SMA_CrossOver_Basic = LeadIndicator.Example_Indicator_SMA_CrossOver_Basic();\n\n            //get the value\n            double returnvalue = Example_Indicator_SMA_CrossOver_Basic[0];\n\n            //set the value\n            Occurred.Set(returnvalue);\n}\n\n\n\n\nStrategy\n\n\nOnBarUpdate\n\n\nSame procedure as in the condition. We create a fresh instance of the indicator and save the return value into a variable and we call the methods to create orders.\n\n\nprotected override void OnBarUpdate()\n{\n            string uniqueOrderName;\n\n            //get the indicator\n            Example_Indicator_SMA_CrossOver_Basic Example_Indicator_SMA_CrossOver_Basic = LeadIndicator.Example_Indicator_SMA_CrossOver_Basic();\n\n            //get the value\n            double returnvalue = Example_Indicator_SMA_CrossOver_Basic[0];\n\n            //Entry\n            if (returnvalue == 1)\n            {   \n                //define a unique name for the order. in this example the current bars timestamp\n                uniqueOrderName = \nLong_SMA_CrossOver\n + Bars[0].Time.ToString();\n\n                //create the long order with quantity \n1\n and our unique OrderName\n                IOrder _orderenterlong = EnterLong(1, uniqueOrderName);\n\n                //set a stop loss for our order. we set it 1% below the current price\n                SetStopLoss(_orderenterlong.Name, CalculationMode.Price, Bars[0].Close * 0.99, false);\n\n                //set a target for our order. we set it 1% above the current price\n                SetProfitTarget(_orderenterlong.Name, CalculationMode.Price, Bars[0].Close * 1.01); \n\n\n            }\n            else if (returnvalue == -1)\n            {\n                //define a unique name for the order. in this example the current bars timestamp\n                uniqueOrderName = \nShort_SMA_CrossOver\n + Bars[0].Time.ToString();\n\n                //create the short order with quantity \n1\n and our unique OrderName\n                IOrder _orderentershort = EnterShort(1, uniqueOrderName);\n\n                //set a stop loss for our order. we set it 1% above the current price\n                SetStopLoss(_orderentershort.Name, CalculationMode.Price, Bars[0].Close * 1.01, false);\n\n                //set a target for our order. we set it 1% below the current price\n                SetProfitTarget(_orderentershort.Name, CalculationMode.Price, Bars[0].Close * 0.99);\n            }\n}\n\n\n\n\nMiscellaneous\n\n\nBars required\n\n\nBecause of backtesting reasons if we use the advanced mode we need at least two bars, but in our case we are using SMA50 so we need at least 50 bars. We set this in the Initialize() method.\n\n\nthis.BarsRequired = 50;\n\n\n\n\nFilenames and Class names\n\n\nTo import all scripts into AgenaTrader without any error we add _indicator, _strategy, _condition or _alert to the filename and also to the c# class name. This is important because if you like to use all files in your AgenaTrader the names must be different.\n\n\nDisplayName and ToString()\n\n\nIn each script we override the ToString() method and the DisplayName to provide a readable string in AgenaTrader. So we do see a readable string instead of the class name in AgenaTrader.\n\n\n        /// \nsummary\n\n        /// defines display name of indicator (e.g. in AgenaTrader chart window)\n        /// \n/summary\n\n        /// \nreturns\n/returns\n\n        public override string ToString()\n        {\n            return \nExample SMA CrossOver Basic\n;\n        }\n\n        /// \nsummary\n\n        /// defines display name of indicator (e.g. in AgenaTrader indicator selection window)\n        /// \n/summary\n\n        public override string DisplayName\n        {\n            get\n            {\n                return \nExample SMA CrossOver Basic\n;\n            }\n        }", 
            "title": "Basic Template"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#download-files", 
            "text": "Indicator  Condition  Strategy", 
            "title": "Download files"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#advanced-template-for-indicator-condition-and-strategy", 
            "text": "Originally posted as a question in the Agenatrader forum  This tutorial will show you a basic template for indicators, conditions and strategies.", 
            "title": "Advanced Template for Indicator, Condition and Strategy"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#indicator", 
            "text": "In many cases we are starting with indicators because indicators are the best place to start on script development. \nYou will be able to get pretty quick an indication if your trading idea is working and of course you are able to screen instruments visual and verify if your trading idea will be profitable.", 
            "title": "Indicator"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#onbarupdate", 
            "text": "Our main logic will be inside of the OnBarUpdate() method. In our example we are using SMA to get long and short signals. If the SMA20 is crossing above the SMA50 we get a long signal. If the SMA20 is crossing below the SMA50 we create a short signal.  protected override void OnBarUpdate()\n{\n            if (CrossAbove(SMA(20), SMA(50), 0) == true)\n            {\n                //set the value of the plot to  1  to inidcate a long signal\n                this.SMA_CrossOver.Set(1);\n            }\n            //the internal function CrossBelow checks if the two values are crossing below\n            else if (CrossBelow(SMA(20), SMA(50), 0) == true)\n            {\n                //set the value of the plot to  -1  to inidcate a short signal\n                this.SMA_CrossOver.Set(-1);\n            }\n            else\n            {\n             //set the value of the plot to  0  to inidcate a flat signal\n                this.SMA_CrossOver.Set(0);\n            }\n}", 
            "title": "OnBarUpdate"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#onbarupdate_1", 
            "text": "Also in this case the main logic is inside of the OnBarUpdate() method. Because our main logic is inside of the indicator itself we need to create an instance of this indicator. So we are able to get the data from the indicator and set our Occured object.  protected override void OnBarUpdate()\n{\n            //get the indicator\n            Example_Indicator_SMA_CrossOver_Basic Example_Indicator_SMA_CrossOver_Basic = LeadIndicator.Example_Indicator_SMA_CrossOver_Basic();\n\n            //get the value\n            double returnvalue = Example_Indicator_SMA_CrossOver_Basic[0];\n\n            //set the value\n            Occurred.Set(returnvalue);\n}", 
            "title": "OnBarUpdate"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#strategy", 
            "text": "", 
            "title": "Strategy"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#onbarupdate_2", 
            "text": "Same procedure as in the condition. We create a fresh instance of the indicator and save the return value into a variable and we call the methods to create orders.  protected override void OnBarUpdate()\n{\n            string uniqueOrderName;\n\n            //get the indicator\n            Example_Indicator_SMA_CrossOver_Basic Example_Indicator_SMA_CrossOver_Basic = LeadIndicator.Example_Indicator_SMA_CrossOver_Basic();\n\n            //get the value\n            double returnvalue = Example_Indicator_SMA_CrossOver_Basic[0];\n\n            //Entry\n            if (returnvalue == 1)\n            {   \n                //define a unique name for the order. in this example the current bars timestamp\n                uniqueOrderName =  Long_SMA_CrossOver  + Bars[0].Time.ToString();\n\n                //create the long order with quantity  1  and our unique OrderName\n                IOrder _orderenterlong = EnterLong(1, uniqueOrderName);\n\n                //set a stop loss for our order. we set it 1% below the current price\n                SetStopLoss(_orderenterlong.Name, CalculationMode.Price, Bars[0].Close * 0.99, false);\n\n                //set a target for our order. we set it 1% above the current price\n                SetProfitTarget(_orderenterlong.Name, CalculationMode.Price, Bars[0].Close * 1.01); \n\n\n            }\n            else if (returnvalue == -1)\n            {\n                //define a unique name for the order. in this example the current bars timestamp\n                uniqueOrderName =  Short_SMA_CrossOver  + Bars[0].Time.ToString();\n\n                //create the short order with quantity  1  and our unique OrderName\n                IOrder _orderentershort = EnterShort(1, uniqueOrderName);\n\n                //set a stop loss for our order. we set it 1% above the current price\n                SetStopLoss(_orderentershort.Name, CalculationMode.Price, Bars[0].Close * 1.01, false);\n\n                //set a target for our order. we set it 1% below the current price\n                SetProfitTarget(_orderentershort.Name, CalculationMode.Price, Bars[0].Close * 0.99);\n            }\n}", 
            "title": "OnBarUpdate"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#bars-required", 
            "text": "Because of backtesting reasons if we use the advanced mode we need at least two bars, but in our case we are using SMA50 so we need at least 50 bars. We set this in the Initialize() method.  this.BarsRequired = 50;", 
            "title": "Bars required"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#filenames-and-class-names", 
            "text": "To import all scripts into AgenaTrader without any error we add _indicator, _strategy, _condition or _alert to the filename and also to the c# class name. This is important because if you like to use all files in your AgenaTrader the names must be different.", 
            "title": "Filenames and Class names"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Basic/README/#displayname-and-tostring", 
            "text": "In each script we override the ToString() method and the DisplayName to provide a readable string in AgenaTrader. So we do see a readable string instead of the class name in AgenaTrader.          ///  summary \n        /// defines display name of indicator (e.g. in AgenaTrader chart window)\n        ///  /summary \n        ///  returns /returns \n        public override string ToString()\n        {\n            return  Example SMA CrossOver Basic ;\n        }\n\n        ///  summary \n        /// defines display name of indicator (e.g. in AgenaTrader indicator selection window)\n        ///  /summary \n        public override string DisplayName\n        {\n            get\n            {\n                return  Example SMA CrossOver Basic ;\n            }\n        }", 
            "title": "DisplayName and ToString()"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/", 
            "text": "Download files\n\n\nIndicator\n\n\nCondition\n\n\nStrategy\n\n\nBasic Template for Indicator, Condition and Strategy\n\n\nOriginally posted as a question in the Agenatrader forum\n\n\nThis tutorial will show you a templates for indicators, conditions, strategies and give you the ability to communicate between these scripts. This will lead you to more code transparency and reduces your programming time. \n\n\nWhy do we want this?\n\n\nAgenaTrader provides you the ability to create indicators, conditions, alerts and strategies in c# and use them during trading. \nOf course you can start creating an indicator and copy the code afterwards into a condition, a strategy or an alert.\nProgramming by using \"copy \n paste\" is easy but on the other hand there are many disadvantages like lack of testing reasons, no single point for bug fixing and low maintainability. \n\n\nIndicator\n\n\nIn many cases we are starting with indicators because indicators are the best place to start on script development. \nYou will be able to get pretty quick an indication if your trading idea is working and of course you are able to screen instruments visual and verify if your trading idea will be profitable.\n\n\nResult value\n\n\nThe result value object will holds all result data from the calculate method so we know what to do. In a strategy we create long or short orders, in a condition we set the Occured object, and so on. In our example we use our global result value object, of course you can use your own class if you need more properties.\n\n\npublic class ResultValue_Example_Indicator_SMA_CrossOver_Advanced\n{\n    public bool ErrorOccured = false;\n    public OrderAction? Entry = null;\n    public OrderAction? Exit = null;\n    public double Price = 0.0;\n    public double Slow = 0.0;\n    public double Fast = 0.0;\n}\n\n\n\n\nMethod calculate\n\n\nWe want to capsulate the main logic into one main methods in the indicator. In our case we do this using the following public method in the indicator.\n\n\npublic ResultValue_Example_Indicator_SMA_CrossOver_Advanced calculate(IDataSeries data, int fastsma, int slowsma, bool islongenabled, bool isshortenabled) {\n/* \n* Here we do all the smart work and in the end we return our result object.\n* So the calling scripts knows what to do (e.g. a strategy will create an order in the market, the condition will create a signal, and so on).\n*/\n}\n\n\n\n\nSo it is possible that other scripts just need to call the calculate method of the indicator and get a decision what to do. \nIn our case the calculate method return an object which holds all important information what has to be done. \nIf we get the OrderAction.Buy as a Entry result, we need to start a long order in a strategy or we set the condition value to 1.\n\n\nCondition\n\n\nWe have finished our indicator so we can start now to work on our condition. \nBecause we already have added our trading concept in the calculate methode in the indicator we just need a reference to our indicator and we are almost done.\n\n\nprivate Example_Indicator_SMA_CrossOver_Advanced _Example_Indicator_SMA_CrossOver_Advanced = null;\n\n\n\n\nWe need to initalize this variable in our OnStartUp() method:\n\n\nprotected override void OnStartUp()\n{\n     base.OnStartUp();\n\n     //Init our indicator to get code access to the calculate method\n     this._Example_Indicator_SMA_CrossOver_Advanced = new Example_Indicator_SMA_CrossOver_Advanced();\n}\n\n\n\n\nNow we are ready to use the calculate method of the indicator in our OnBarUpdate() method of the condition:\n\n\n//Lets call the calculate method and save the result with the trade action\nResultValue_Example_Indicator_SMA_CrossOver_Advanced returnvalue = this._Example_Indicator_SMA_CrossOver_Advanced.calculate(this.Input, this.FastSma, this.SlowSma, this.IsLongEnabled, this.IsShortEnabled);\n\n\n\n\nIn the code snippet above we see that the return value of the calculate method is our result object from the beginning of this tutorial. So we just need to evaluate this object.\n\n\n//Entry\nif (returnvalue.Entry.HasValue)\n{\n   switch (returnvalue.Entry)\n    {\n        case OrderAction.Buy:\n            //Long Signal\n            Occurred.Set(1);\n            Entry.Set(1);\n            break;\n        case OrderAction.SellShort:\n            //Short Signal\n            Occurred.Set(-1);\n            Entry.Set(-1);\n            break;\n    }\n}\nelse\n{\n   //No Signal\n   Occurred.Set(0);\n   Entry.Set(0);\n}\n\n\n\n\nStrategy\n\n\nOf course we are following the same procedure as in our condition. We create a variable of the indicator class, we initalize this variable during the OnStartUp() method and we use the object in our OnBarUpdate() method.\nPlease pay attention because of backtesting reasons if we use the advanced mode we need at least two bars!\n\n\n//Because of backtesting reasons if we use the advanced mode we need at least two bars!\n//In this case we are using SMA50, so we need at least 50 bars.\nthis.BarsRequired = 50;\n\n\n\n\nIf you start the strategy on a chart the TimeFrame is automatically set. If you start this strategy with the strategy escort it would be a smart idea to set a default TimeFrame, this will lead to a better usability. We do this by adding the default TimeFrame in the Initialize() method.\n\n\nif (this.TimeFrame == null || this.TimeFrame.PeriodicityValue == 0)\n{\n    this.TimeFrame = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\n}\n\n\n\n\nWe use IsAutomated = true to decide if the strategy will do all work fully automated. In this case the strategy can be used in strategy escort and will create entry \n exit orders automatically.\n\n\nIn the end of the strategy file there are four methods: DoEnterLong(), DoEnterShort(), DoExitLong() and DoExitShort()\nIn these methods we implement all rules for the creation of orders.\n\n\nMiscellaneous\n\n\nFilenames and Class names\n\n\nPlease be aware that class names must be unique. To import all scripts into AgenaTrader without any error we add _indicator, _strategy, _condition or _alert to the filename and also to the name of the c# class.\n\n\nColor and drawing style\n\n\nIf the user has changed the color or the drawing style of the script (indicator or condition) we need to change the setting during the OnBarUpdate() method.\n\n\n//Set the drawing style, if the user has changed it.\nPlotColors[0][0] = this.Plot0Color;\nPlots[0].PenStyle = this.Dash0Style;\nPlots[0].Pen.Width = this.Plot0Width;\n\n\n\n\nDisplayName and ToString()\n\n\nIn each script we override the ToString() method and the DisplayName property to provide a readable string in AgenaTrader. So we do see a readable string instead of the class name in AgenaTrader. In parentheses we add and C for Condition, I for Indicator, A for Alert and S for Strategy to ensure that we can distinguish between the scripts (e.g. if we are editing on indicator and condition in charts).\n\n\n        /// \nsummary\n\n        /// defines display name of indicator (e.g. in AgenaTrader chart window)\n        /// \n/summary\n\n        /// \nreturns\n/returns\n\n        public override string ToString()\n        {\n            return \nExample SMA CrossOver Advanced (I)\n;\n        }\n\n        /// \nsummary\n\n        /// defines display name of indicator (e.g. in AgenaTrader indicator selection window)\n        /// \n/summary\n\n        public override string DisplayName\n        {\n            get\n            {\n                return \nExample SMA CrossOver Advanced (I)\n;\n            }\n        }", 
            "title": "Advanced Template"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#download-files", 
            "text": "Indicator  Condition  Strategy", 
            "title": "Download files"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#basic-template-for-indicator-condition-and-strategy", 
            "text": "Originally posted as a question in the Agenatrader forum  This tutorial will show you a templates for indicators, conditions, strategies and give you the ability to communicate between these scripts. This will lead you to more code transparency and reduces your programming time.", 
            "title": "Basic Template for Indicator, Condition and Strategy"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#why-do-we-want-this", 
            "text": "AgenaTrader provides you the ability to create indicators, conditions, alerts and strategies in c# and use them during trading. \nOf course you can start creating an indicator and copy the code afterwards into a condition, a strategy or an alert.\nProgramming by using \"copy   paste\" is easy but on the other hand there are many disadvantages like lack of testing reasons, no single point for bug fixing and low maintainability.", 
            "title": "Why do we want this?"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#indicator", 
            "text": "In many cases we are starting with indicators because indicators are the best place to start on script development. \nYou will be able to get pretty quick an indication if your trading idea is working and of course you are able to screen instruments visual and verify if your trading idea will be profitable.", 
            "title": "Indicator"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#result-value", 
            "text": "The result value object will holds all result data from the calculate method so we know what to do. In a strategy we create long or short orders, in a condition we set the Occured object, and so on. In our example we use our global result value object, of course you can use your own class if you need more properties.  public class ResultValue_Example_Indicator_SMA_CrossOver_Advanced\n{\n    public bool ErrorOccured = false;\n    public OrderAction? Entry = null;\n    public OrderAction? Exit = null;\n    public double Price = 0.0;\n    public double Slow = 0.0;\n    public double Fast = 0.0;\n}", 
            "title": "Result value"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#method-calculate", 
            "text": "We want to capsulate the main logic into one main methods in the indicator. In our case we do this using the following public method in the indicator.  public ResultValue_Example_Indicator_SMA_CrossOver_Advanced calculate(IDataSeries data, int fastsma, int slowsma, bool islongenabled, bool isshortenabled) {\n/* \n* Here we do all the smart work and in the end we return our result object.\n* So the calling scripts knows what to do (e.g. a strategy will create an order in the market, the condition will create a signal, and so on).\n*/\n}  So it is possible that other scripts just need to call the calculate method of the indicator and get a decision what to do. \nIn our case the calculate method return an object which holds all important information what has to be done. \nIf we get the OrderAction.Buy as a Entry result, we need to start a long order in a strategy or we set the condition value to 1.", 
            "title": "Method calculate"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#condition", 
            "text": "We have finished our indicator so we can start now to work on our condition. \nBecause we already have added our trading concept in the calculate methode in the indicator we just need a reference to our indicator and we are almost done.  private Example_Indicator_SMA_CrossOver_Advanced _Example_Indicator_SMA_CrossOver_Advanced = null;  We need to initalize this variable in our OnStartUp() method:  protected override void OnStartUp()\n{\n     base.OnStartUp();\n\n     //Init our indicator to get code access to the calculate method\n     this._Example_Indicator_SMA_CrossOver_Advanced = new Example_Indicator_SMA_CrossOver_Advanced();\n}  Now we are ready to use the calculate method of the indicator in our OnBarUpdate() method of the condition:  //Lets call the calculate method and save the result with the trade action\nResultValue_Example_Indicator_SMA_CrossOver_Advanced returnvalue = this._Example_Indicator_SMA_CrossOver_Advanced.calculate(this.Input, this.FastSma, this.SlowSma, this.IsLongEnabled, this.IsShortEnabled);  In the code snippet above we see that the return value of the calculate method is our result object from the beginning of this tutorial. So we just need to evaluate this object.  //Entry\nif (returnvalue.Entry.HasValue)\n{\n   switch (returnvalue.Entry)\n    {\n        case OrderAction.Buy:\n            //Long Signal\n            Occurred.Set(1);\n            Entry.Set(1);\n            break;\n        case OrderAction.SellShort:\n            //Short Signal\n            Occurred.Set(-1);\n            Entry.Set(-1);\n            break;\n    }\n}\nelse\n{\n   //No Signal\n   Occurred.Set(0);\n   Entry.Set(0);\n}", 
            "title": "Condition"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#strategy", 
            "text": "Of course we are following the same procedure as in our condition. We create a variable of the indicator class, we initalize this variable during the OnStartUp() method and we use the object in our OnBarUpdate() method.\nPlease pay attention because of backtesting reasons if we use the advanced mode we need at least two bars!  //Because of backtesting reasons if we use the advanced mode we need at least two bars!\n//In this case we are using SMA50, so we need at least 50 bars.\nthis.BarsRequired = 50;  If you start the strategy on a chart the TimeFrame is automatically set. If you start this strategy with the strategy escort it would be a smart idea to set a default TimeFrame, this will lead to a better usability. We do this by adding the default TimeFrame in the Initialize() method.  if (this.TimeFrame == null || this.TimeFrame.PeriodicityValue == 0)\n{\n    this.TimeFrame = new TimeFrame(DatafeedHistoryPeriodicity.Day, 1);\n}  We use IsAutomated = true to decide if the strategy will do all work fully automated. In this case the strategy can be used in strategy escort and will create entry   exit orders automatically.  In the end of the strategy file there are four methods: DoEnterLong(), DoEnterShort(), DoExitLong() and DoExitShort()\nIn these methods we implement all rules for the creation of orders.", 
            "title": "Strategy"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#filenames-and-class-names", 
            "text": "Please be aware that class names must be unique. To import all scripts into AgenaTrader without any error we add _indicator, _strategy, _condition or _alert to the filename and also to the name of the c# class.", 
            "title": "Filenames and Class names"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#color-and-drawing-style", 
            "text": "If the user has changed the color or the drawing style of the script (indicator or condition) we need to change the setting during the OnBarUpdate() method.  //Set the drawing style, if the user has changed it.\nPlotColors[0][0] = this.Plot0Color;\nPlots[0].PenStyle = this.Dash0Style;\nPlots[0].Pen.Width = this.Plot0Width;", 
            "title": "Color and drawing style"
        }, 
        {
            "location": "/Example_Indicator_Condition_Strategy_Advanced/README/#displayname-and-tostring", 
            "text": "In each script we override the ToString() method and the DisplayName property to provide a readable string in AgenaTrader. So we do see a readable string instead of the class name in AgenaTrader. In parentheses we add and C for Condition, I for Indicator, A for Alert and S for Strategy to ensure that we can distinguish between the scripts (e.g. if we are editing on indicator and condition in charts).          ///  summary \n        /// defines display name of indicator (e.g. in AgenaTrader chart window)\n        ///  /summary \n        ///  returns /returns \n        public override string ToString()\n        {\n            return  Example SMA CrossOver Advanced (I) ;\n        }\n\n        ///  summary \n        /// defines display name of indicator (e.g. in AgenaTrader indicator selection window)\n        ///  /summary \n        public override string DisplayName\n        {\n            get\n            {\n                return  Example SMA CrossOver Advanced (I) ;\n            }\n        }", 
            "title": "DisplayName and ToString()"
        }
    ]
}